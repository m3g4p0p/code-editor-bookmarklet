{"version":3,"sources":["webpack:///./monaco.js","webpack:///./index.js","webpack:///./util.js"],"names":["CDN_BASE","languageSelect","document","getElementById","themeSelect","insertButton","closeButton","params","URLSearchParams","window","location","search","decodeURIComponent","get","origin","theme","postMessage","data","parent","addEventListener","type","body","event","target","currentTarget","click","async","src","deps","Promise","resolve","reject","script","createElement","onload","onerror","appendChild","require","config","paths","vs","MonacoEnvironment","getWorkerUrl","workerId","label","encodeURIComponent","monaco","initMonaco","then","editor","create","value","language","disabled","setModelLanguage","getModel","setTheme","getValue","syntax","_editor","code","fetch","res","text","textContent","classList","add","catch","console","error","showInstructions"],"mappings":"mBAEA,MAAMA,EAAW,kECAXC,EAAiBC,SAASC,eAAe,YACzCC,EAAcF,SAASC,eAAe,SACtCE,EAAeH,SAASC,eAAe,UACvCG,EAAcJ,SAASC,eAAe,SACtCI,EAAS,IAAIC,gBAAgBC,OAAOC,SAASC,QAC7C,EAAOC,mBAAmBL,EAAOM,IAAI,SAAW,IAChDC,EAASP,EAAOM,IAAI,WAAa,IACjCE,EAAQR,EAAOM,IAAI,SAczB,SAASG,EAAaC,GACpBR,OAAOS,OAAOF,YAAYC,EAAMH,GAGlCR,EAAYa,iBAAiB,SAAS,KACpCH,EAAY,CAAEI,KAAM,oBAGtBlB,SAASmB,KAAKF,iBAAiB,SAASG,IAClCA,EAAMC,SAAWD,EAAME,eACzBlB,EAAYmB,WD7BTC,iBEJA,IAAqBC,EAWEC,EFS5B,aEpB0BD,EFKT,GAAG3B,qBEJb,IAAI6B,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS9B,SAAS+B,cAAc,UAEtCD,EAAOL,IAAMA,EACbK,EAAOE,OAASJ,EAChBE,EAAOG,QAAUJ,EACjB7B,SAASmB,KAAKe,YAAYJ,OFD5BK,QAAQC,OAAO,CAAEC,MAAO,CAAEC,GAAI,GAAGxC,UAEjCS,OAAOgC,kBAAoB,CACzBC,aAAc,SAAUC,EAAUC,GAChC,MAAO,sCAAsCC,mBAAmB,6DAEhD7C,0CAEGA,+CEHK4B,EFQT,CAAC,yBEPb,IAAIC,SAAQC,GAAWO,QAAQT,EAAME,MFQrCrB,OAAOqC,OCiBhBC,GAAaC,MAAKF,IAChB,MAAMG,EAASH,EAAOG,OAAOC,OAAOhD,SAASC,eAAe,UAAW,CACrEgD,MAAO,EACPC,SAAUnD,EAAekD,SACtBpC,EAAQ,CAAEA,SAAU,OAGzBd,EAAeoD,UAAW,EAC1BjD,EAAYiD,UAAW,EACvBjD,EAAY+C,MAAQpC,GAASX,EAAY+C,MACzC9C,EAAagD,UAAW,EAExBpD,EAAekB,iBAAiB,UAAU,KACxC2B,EAAOG,OAAOK,iBACZL,EAAOM,WACPtD,EAAekD,UAInB/C,EAAYe,iBAAiB,UAAU,KACrC2B,EAAOG,OAAOO,SAASpD,EAAY+C,OAEnCnC,EAAY,CACVI,KAAM,eACNL,MAAOX,EAAY+C,WAIvB9C,EAAac,iBAAiB,SAAS,KACrCH,EAAY,CACVI,KAAM,gBACN+B,MAAOF,EAAOQ,WACdC,OAAQzD,EAAekD,WAI3B1C,OAAOkD,QAAUV,KAGfxC,OAAOS,SAAWT,QAjEtB,WACE,MAAMmD,EAAO1D,SAASC,eAAe,QAErC0D,MAAM,yBACHb,MAAKc,GAAOA,EAAIC,SAChBf,MAAKe,IACJH,EAAKI,YAAc,0BAA0BnB,mBAAmBkB,SAChE7D,SAASmB,KAAK4C,UAAUC,IAAI,oBAE7BC,MAAMC,QAAQC,OAyDjBC,I","file":"main.js","sourcesContent":["import { loadScript, asyncRequire } from './util'\n\nconst CDN_BASE = 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.21.2/min'\n\nexport async function initMonaco () {\n  await loadScript(`${CDN_BASE}/vs/loader.min.js`)\n  require.config({ paths: { vs: `${CDN_BASE}/vs` } })\n\n  window.MonacoEnvironment = {\n    getWorkerUrl: function (workerId, label) {\n      return `data:text/javascript;charset=utf-8,${encodeURIComponent(`\n        self.MonacoEnvironment = {\n          baseUrl: '${CDN_BASE}'\n        };\n        importScripts('${CDN_BASE}/vs/base/worker/workerMain.js');`\n      )}`\n    }\n  }\n\n  await asyncRequire(['vs/editor/editor.main'])\n  return window.monaco\n}\n","import { initMonaco } from './monaco'\n\nconst languageSelect = document.getElementById('language')\nconst themeSelect = document.getElementById('theme')\nconst insertButton = document.getElementById('insert')\nconst closeButton = document.getElementById('close')\nconst params = new URLSearchParams(window.location.search)\nconst text = decodeURIComponent(params.get('text') || '')\nconst origin = params.get('origin') || '*'\nconst theme = params.get('theme')\n\nfunction showInstructions () {\n  const code = document.getElementById('code')\n\n  fetch('./dist/bookmarklet.js')\n    .then(res => res.text())\n    .then(text => {\n      code.textContent = `javascript:(function(){${encodeURIComponent(text)}})()`\n      document.body.classList.add('show-sections')\n    })\n    .catch(console.error)\n}\n\nfunction postMessage (data) {\n  window.parent.postMessage(data, origin)\n}\n\ncloseButton.addEventListener('click', () => {\n  postMessage({ type: 'editor.close' })\n})\n\ndocument.body.addEventListener('click', event => {\n  if (event.target === event.currentTarget) {\n    closeButton.click()\n  }\n})\n\ninitMonaco().then(monaco => {\n  const editor = monaco.editor.create(document.getElementById('editor'), {\n    value: text,\n    language: languageSelect.value,\n    ...theme ? { theme } : null\n  })\n\n  languageSelect.disabled = false\n  themeSelect.disabled = false\n  themeSelect.value = theme || themeSelect.value\n  insertButton.disabled = false\n\n  languageSelect.addEventListener('change', () => {\n    monaco.editor.setModelLanguage(\n      editor.getModel(),\n      languageSelect.value\n    )\n  })\n\n  themeSelect.addEventListener('change', () => {\n    monaco.editor.setTheme(themeSelect.value)\n\n    postMessage({\n      type: 'editor.theme',\n      theme: themeSelect.value\n    })\n  })\n\n  insertButton.addEventListener('click', () => {\n    postMessage({\n      type: 'editor.insert',\n      value: editor.getValue(),\n      syntax: languageSelect.value\n    })\n  })\n\n  window._editor = editor\n})\n\nif (window.parent === window) {\n  showInstructions()\n}\n","export function loadScript (src) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script')\n\n    script.src = src\n    script.onload = resolve\n    script.onerror = reject\n    document.body.appendChild(script)\n  })\n}\n\nexport function asyncRequire (deps) {\n  return new Promise(resolve => require(deps, resolve))\n}\n"],"sourceRoot":""}